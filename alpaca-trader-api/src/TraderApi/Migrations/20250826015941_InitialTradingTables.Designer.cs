// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TraderApi.Data;

#nullable disable

namespace TraderApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826015941_InitialTradingTables")]
    partial class InitialTradingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TraderApi.Data.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastTriggeredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("Threshold")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Symbol");

                    b.HasIndex("UserId", "Active");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("TraderApi.Data.AlpacaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ApiKeyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrokerAccountId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Env")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsBrokerApi")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Env")
                        .IsUnique();

                    b.ToTable("AlpacaLinks");
                });

            modelBuilder.Entity("TraderApi.Data.Entities.AssetCache", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("EasyToBorrow")
                        .HasColumnType("boolean");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("Fractionable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Marginable")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MinOrderSize")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("MinTradeIncrement")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("PriceIncrement")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<bool>("Shortable")
                        .HasColumnType("boolean");

                    b.Property<bool>("Tradable")
                        .HasColumnType("boolean");

                    b.HasKey("Symbol");

                    b.HasIndex("AssetClass");

                    b.HasIndex("LastUpdated");

                    b.HasIndex("Tradable");

                    b.ToTable("AssetCache");
                });

            modelBuilder.Entity("TraderApi.Data.OrderLocalAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlpacaOrderId")
                        .HasColumnType("text");

                    b.Property<string>("ClientOrderId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("LimitPrice")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<decimal>("Qty")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TimeInForce")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlpacaOrderId");

                    b.HasIndex("ClientOrderId")
                        .IsUnique();

                    b.HasIndex("UserId", "CreatedAt");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TraderApi.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthSub")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthSub")
                        .IsUnique();

                    b.HasIndex("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TraderApi.Data.Watchlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("TraderApi.Data.WatchlistSymbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("WatchlistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WatchlistId", "Symbol")
                        .IsUnique();

                    b.ToTable("WatchlistSymbols");
                });

            modelBuilder.Entity("TraderApi.Data.Alert", b =>
                {
                    b.HasOne("TraderApi.Data.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TraderApi.Data.AlpacaLink", b =>
                {
                    b.HasOne("TraderApi.Data.User", "User")
                        .WithMany("AlpacaLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TraderApi.Data.OrderLocalAudit", b =>
                {
                    b.HasOne("TraderApi.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TraderApi.Data.Watchlist", b =>
                {
                    b.HasOne("TraderApi.Data.User", "User")
                        .WithMany("Watchlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TraderApi.Data.WatchlistSymbol", b =>
                {
                    b.HasOne("TraderApi.Data.Watchlist", "Watchlist")
                        .WithMany("Symbols")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("TraderApi.Data.User", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("AlpacaLinks");

                    b.Navigation("Orders");

                    b.Navigation("Watchlists");
                });

            modelBuilder.Entity("TraderApi.Data.Watchlist", b =>
                {
                    b.Navigation("Symbols");
                });
#pragma warning restore 612, 618
        }
    }
}
